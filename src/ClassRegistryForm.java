
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

public class ClassRegistryForm extends JFrame {

    /**
     * Creates new form ClassRegistryForm
     */
    public ClassRegistryForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        classCodeLabel = new javax.swing.JLabel();
        classCodeText = new javax.swing.JTextField();
        classNameLabel = new javax.swing.JLabel();
        classNameText = new javax.swing.JTextField();
        classPeriodLabel = new javax.swing.JLabel();
        classPeriodText = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        searchBox = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        classPeriodLabel1 = new javax.swing.JLabel();
        lecturerText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResultList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ders Kayıt Formu");

        classCodeLabel.setText("Ders Kodu:");

        classNameLabel.setText("Ders Adı:");

        classPeriodLabel.setText("Ders Dönemi:");

        saveButton.setText("Kaydet");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        searchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxActionPerformed(evt);
            }
        });

        searchButton.setText("Arama");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        classPeriodLabel1.setText("Öğretmen:");

        jScrollPane1.setViewportView(searchResultList);

        jLabel1.setText("Ders Adı ile Arama:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(classNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classPeriodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classPeriodLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(classPeriodText, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(classCodeText, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(classNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(lecturerText)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(56, 56, 56))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {classCodeLabel, classNameLabel, classPeriodLabel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {classCodeText, classNameText, classPeriodText});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classCodeLabel)
                    .addComponent(classCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classNameLabel)
                    .addComponent(classNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classPeriodLabel)
                    .addComponent(classPeriodText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classPeriodLabel1)
                    .addComponent(lecturerText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90)
                .addComponent(saveButton)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // method for saving inputs to the csv file
    private void saveToCSV(ClassRegistryForm.DersClass ders) {
        String fileName = "class_data.csv";
        boolean isFileEmpty = false;
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            // Read the first line to check if the file has data
            String line = br.readLine();
            if (line == null || line.isEmpty()) {
                isFileEmpty = true;
            }

        } catch (IOException e) {
            isFileEmpty = true;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true));) {

            // check if the file is empty
            if (isFileEmpty) {
                writer.write("Ders Kodu,Ders Ad,Ders Donem,Ogretmen");
                writer.newLine();
            }
            // Append data to the CSV file
            writer.write(ders.getDersKodu() + "," + ders.getDersAd() + ","
                    + ders.getDersDonem() + "," + ders.getOgretmen());
            writer.newLine();

            JOptionPane.showMessageDialog(this, "Bilgiler başarıyla kaydedildi", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Bilgileri dosyaya kaydederken hata oluştu", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // method for clearing the text fields
    private void clearFields() {
        classCodeText.setText(null);
        classNameText.setText(null);
        classPeriodText.setText(null);
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String classCode = classCodeText.getText();
        String className = classNameText.getText();
        String classPeriod = classPeriodText.getText();
        String lecturer = lecturerText.getText();

        // Check if any of the fields is empty
        if (classCode.isEmpty() || className.isEmpty() || classPeriod.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen bütün boşlukları doldurunuz", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a DersClass instance
        DersClass ders = new DersClass(classCode, className, classPeriod, lecturer);

        // Save data to CSV file
        saveToCSV(ders);

        // clearing the text fields after the save
        clearFields();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void searchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBoxActionPerformed

     // method for searchbox button
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchValue = searchBox.getText();

        if (searchValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Arama kutusunu doldurunuz", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultListModel<String> resultListModel = new DefaultListModel<>();

        String fileName = "class_data.csv";
        
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            String line;

            line = br.readLine();
            resultListModel.addElement(line);

            while ((line = br.readLine()) != null) {

                String[] parts = line.split(",");
                String dersAd = parts[1].trim();

                if (dersAd.toLowerCase().contains(searchValue.toLowerCase())) {
                    resultListModel.addElement(line);
                }
            }

            if (resultListModel.size() <= 1) {
                JOptionPane.showMessageDialog(this, "Ders bulunamadı", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
            } else {
                searchResultList.setModel(resultListModel);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Dosya okuma hatası", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassRegistryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassRegistryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassRegistryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassRegistryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassRegistryForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel classCodeLabel;
    private javax.swing.JTextField classCodeText;
    private javax.swing.JLabel classNameLabel;
    private javax.swing.JTextField classNameText;
    private javax.swing.JLabel classPeriodLabel;
    private javax.swing.JLabel classPeriodLabel1;
    private javax.swing.JTextField classPeriodText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lecturerText;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JList<String> searchResultList;
    // End of variables declaration//GEN-END:variables

    // Class for the ClassRegistryForm input fields
    private static class DersClass {

        // class variables
        private String dersKodu;
        private String dersAd;
        private String dersDonem;
        private String ogretmen;

        // constructor of the class
        public DersClass(String dersKodu, String dersAd, String dersDonem, String ogretmen) {
            this.dersKodu = dersKodu;
            this.dersAd = dersAd;
            this.dersDonem = dersDonem;
            this.ogretmen = ogretmen;
        }

        // get method for the dersKodu variable
        private String getDersKodu() {
            return dersKodu;
        }

        // get method for the dersAd variable
        private String getDersAd() {
            return dersAd;
        }

        // get method for the dersDonem variable
        private String getDersDonem() {
            return dersDonem;
        }

        // get method for the dersDonem variable
        private String getOgretmen() {
            return ogretmen;
        }
    }

}
