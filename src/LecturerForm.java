
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

public class LecturerForm extends javax.swing.JFrame {

    /**
     * Creates new form LecturerForm
     */
    
    // variable for filling combobox data
    private final JComboBox<String> lecturerClassesComboboxmodel = new JComboBox<>();

    // method for filling the combobox with csv file data
    private JComboBox<String> loadDataFromFile(){
        String fileName = "class_data.csv";
        
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
        // Read the first line to check if the file has data
        String line ;
        br.readLine();
        while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                // add each line to the variable
                lecturerClassesComboboxmodel.addItem(data[0]);
            }
        return lecturerClassesComboboxmodel;
        
    } catch (IOException e){
        e.printStackTrace();
    } 
        return null;
}
    
    public LecturerForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lecturerDepartmentLabel = new javax.swing.JLabel();
        lecturerDepartmentText = new javax.swing.JTextField();
        lecturerClassesLabel = new javax.swing.JLabel();
        lecturerClassesCombobox = new javax.swing.JComboBox<>();
        lecturerNumberText = new javax.swing.JTextField();
        searchBox = new javax.swing.JTextField();
        searchBoxButton = new javax.swing.JButton();
        lecturer = new javax.swing.JLabel();
        lecturerNameText = new javax.swing.JTextField();
        lecturerSurnameLabel = new javax.swing.JLabel();
        lecturerSurnameText = new javax.swing.JTextField();
        lecturerNumberLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResultList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lecturerDepartmentLabel.setText("Öğretmen Bölümü: ");

        lecturerClassesLabel.setText("Öğretmenin Verdiği Dersler:");

        lecturerClassesCombobox.setModel(loadDataFromFile().getModel());

        searchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxActionPerformed(evt);
            }
        });

        searchBoxButton.setText("Arama");
        searchBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxButtonActionPerformed(evt);
            }
        });

        lecturer.setText("Öğretmen Adı:");

        lecturerSurnameLabel.setText("Öğretmen Soyadı:");

        lecturerNumberLabel.setText("Öğretmen No:");

        saveButton.setText("Kaydet");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Öğretmen Adı ile Arama:");

        jScrollPane1.setViewportView(searchResultList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBox, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBoxButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(saveButton)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lecturer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(lecturerNumberLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(lecturerSurnameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(lecturerDepartmentLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(lecturerClassesLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lecturerDepartmentText, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addComponent(lecturerNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addComponent(lecturerSurnameText, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addComponent(lecturerClassesCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lecturerNumberText))))
                    .addComponent(jScrollPane1))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBoxButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lecturerNumberLabel)
                    .addComponent(lecturerNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lecturerNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lecturer))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lecturerSurnameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lecturerSurnameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lecturerDepartmentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lecturerDepartmentLabel))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lecturerClassesLabel)
                    .addComponent(lecturerClassesCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // method for saving inputs to the csv file
    private void saveToCSV(LecturerForm.OgretmenClass ogretmen) {
        String fileName = "lecturer_data.csv";
        boolean isFileEmpty = false;
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
        // Read the first line to check if the file has data
        String line = br.readLine();
        if (line == null || line.isEmpty())
        {
            isFileEmpty = true;
        }
        
        } catch (IOException e) {
            isFileEmpty = true;
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true));) {
            
            // check for if the file is empty
            if (isFileEmpty){
                writer.write("Ogretmen No,Ogretmen Ad,Ogretmen Soyad,Ogretmen Bolum,Ogretmen Dersler");
                writer.newLine();
            }
            // Append data to the CSV file
            writer.write(ogretmen.getOgretmenNo() + "," + ogretmen.getOgretmenAd() + "," +
                    ogretmen.getOgretmenSoyad() + "," + ogretmen.getOgretmenBolum() + "," + ogretmen.getOgretmenDersler());
            writer.newLine();

            JOptionPane.showMessageDialog(this, "Bilgiler başarıyla kaydedildi", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Bilgileri dosyaya kaydederken hata oluştu", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // method for clearin the input fields
    private void clearFields(){
        lecturerNumberText.setText(null);
        lecturerNameText.setText(null);
        lecturerSurnameText.setText(null);
        lecturerDepartmentText.setText(null);
    }
    
    private void searchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBoxActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String studentNumber = lecturerNumberText.getText();
        String studentName = lecturerNameText.getText();
        String studentSurname = lecturerSurnameText.getText();
        String studentDepartment = lecturerDepartmentText.getText();
        String studentClasses = (String) lecturerClassesCombobox.getSelectedItem();

        // Check if any of the fields is empty
        if (studentNumber.isEmpty() || studentName.isEmpty() || studentSurname.isEmpty() || studentDepartment.isEmpty() || studentClasses == null) {
            JOptionPane.showMessageDialog(this, "Lütfen bütün boşlukları doldurunuz", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a OgretmenClass instance
        OgretmenClass ogretmen = new OgretmenClass(studentNumber, studentName, studentSurname, studentDepartment, studentClasses);

        // Save data to CSV file
        saveToCSV(ogretmen);

        // Clear the text fields after the save
        clearFields();
    }//GEN-LAST:event_saveButtonActionPerformed

    // method for searchbox button
    private void searchBoxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxButtonActionPerformed

        String searchValue = searchBox.getText();
        
        if (searchValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Arama kutusunu doldurunuz", "Error", JOptionPane.ERROR);
            return;
        }
        
        DefaultListModel<String> resultListModel = new DefaultListModel<>();
        
        String fileName = "lecturer_data.csv";
        
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
        
            String line;
            
            line = br.readLine();
            
            resultListModel.addElement(line);
            
            while ((line = br.readLine()) != null) {
            
                String[] parts = line.split(",");
                String ogretmenAd = parts[1].trim();
                
                if (ogretmenAd.toLowerCase().contains(searchValue.toLowerCase())) {
                    resultListModel.addElement(line);
                }
            }
            
            if (resultListModel.size() <= 1){
                JOptionPane.showMessageDialog(this, "Öğretmen bulunamadı", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
            } else {
                searchResultList.setModel(resultListModel);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Dosya okuma hatası", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_searchBoxButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LecturerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lecturer;
    private javax.swing.JComboBox<String> lecturerClassesCombobox;
    private javax.swing.JLabel lecturerClassesLabel;
    private javax.swing.JLabel lecturerDepartmentLabel;
    private javax.swing.JTextField lecturerDepartmentText;
    private javax.swing.JTextField lecturerNameText;
    private javax.swing.JLabel lecturerNumberLabel;
    private javax.swing.JTextField lecturerNumberText;
    private javax.swing.JLabel lecturerSurnameLabel;
    private javax.swing.JTextField lecturerSurnameText;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton searchBoxButton;
    private javax.swing.JList<String> searchResultList;
    // End of variables declaration//GEN-END:variables

    // Class for the StudentRegistryForm input fields
    private static class OgretmenClass {

        // variable of the class
        private String ogretmenNo;
        private String ogretmenAd;
        private String ogretmenSoyad;
        private String ogretmenBolum;
        private String ogretmenDersler;
                
        // constructor of the Class
        public OgretmenClass(String ogretmenNo, String ogretmenAd, String ogretmenSoyad, String ogretmenBolum, String ogretmenDersler) {
            this.ogretmenNo = ogretmenNo;
            this.ogretmenAd = ogretmenAd;
            this.ogretmenSoyad = ogretmenSoyad;
            this.ogretmenBolum = ogretmenBolum;
            this.ogretmenDersler = ogretmenDersler;
        }
        
        // get method for the ogretmenNo variable
        private String getOgretmenNo() {
            return ogretmenNo;
        }

        // get method for the ogretmenAd variable
        private String getOgretmenAd() {
            return ogretmenAd;
        }
        
        // get method for the ogretmenSoyad variable
        private String getOgretmenSoyad() {
            return ogretmenSoyad;
        }

        // get method for the ogretmenBolum variable
        private String getOgretmenBolum() {
            return ogretmenBolum;
        }
        
        // get method for the ogretmenDersler variable
        private String getOgretmenDersler() {
            return ogretmenDersler;
        }
        
    }
}
